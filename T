from selenium import webdriver
from selenium.webdriver.common.by import By
import time


class GoogleFormAutomation:
    def setUp(self):
        try:
            self.driver = webdriver.Chrome()
            print("Browser launched successfully.")
        except Exception as e:
            print(f"Error initializing WebDriver: {str(e)}")
            raise

    def fill_form(self):
        try:
            form_url = "https://forms.gle/mSV8WEUWiBEFA4J88"

            self.driver.get(form_url)
            time.sleep(2) 

            name = "John Doe" 
            name_input = self.driver.find_element(By.XPATH, '//input[@aria-labelledby="i1 i4"]')
            name_input.send_keys(name)
            time.sleep(1)

            usn = "4SF21IS000" 
            usn_input = self.driver.find_element(By.XPATH, '//input[@aria-labelledby="i6 i9"]')
            usn_input.send_keys(usn)
            time.sleep(1)

            submit_button_xpath = '//*[@id="mG61Hd"]/div[2]/div/div[3]/div[1]/div[1]/div/span/span'
            submit_button = self.driver.find_element(By.XPATH, submit_button_xpath)
            submit_button.click()
            time.sleep(2)  
            print("Form submitted successfully.")
        except Exception as e:
            print(f"An error occurred while filling the form: {str(e)}")

    def tearDown(self):
        if hasattr(self, 'driver'):
            self.driver.quit()
            print("Browser closed successfully.")
if __name__ == "__main__":
    automation = GoogleFormAutomation()
    automation.setUp()
    automation.fill_form()
    automation.tearDown()




---------- Forwarded message ----------
From: OM GAJAKOSH <om.is21@sahyadri.edu.in>
To: redranger2805@gmail.com
Cc: 
Bcc: 
Date: Fri, 13 Dec 2024 14:15:05 +0530
Subject: 11 st
import time
from selenium import webdriver
from selenium.webdriver.common.by import By


class GoogleMapsAutomation:
    def setUp(self):
        try:
            self.driver = webdriver.Chrome()
        except Exception as e:
            print(f"Error initializing WebDriver: {str(e)}")
            raise

    def search_location(self):
        try:
            g_link = "https://www.google.com/maps"
            
            ip_xpath = '//*[@id="searchboxinput"]'
            search_button_xpath = '//*[@id="searchbox-searchbutton"]'
            self.driver.get(g_link)
            time.sleep(2) 
            location = input("Enter Location: ")
            search_input = self.driver.find_element(By.XPATH, ip_xpath)
            search_input.send_keys(location)
            time.sleep(1) 
            search_button = self.driver.find_element(By.XPATH, search_button_xpath)
            search_button.click()
            time.sleep(5)  
            print(f"Successfully searched for: {location}")
        except Exception as e:
            print(f"An error occurred during search: {str(e)}")

    def tearDown(self):
        if hasattr(self, 'driver'):
            self.driver.quit()
            print("Browser closed successfully.")


if __name__ == "__main__":
    automation = GoogleMapsAutomation()
    automation.setUp()
    automation.search_location()
    automation.tearDown()




---------- Forwarded message ----------
From: OM GAJAKOSH <om.is21@sahyadri.edu.in>
To: redranger2805@gmail.com
Cc: 
Bcc: 
Date: Fri, 13 Dec 2024 14:01:09 +0530
Subject: 9th st
import unittest
from selenium import webdriver
from selenium.webdriver.common.by import By


class Count(unittest.TestCase):
    def setUp(self):
        self.driver = webdriver.Chrome()  
        self.driver.get("http://www.google.co.in")
        self.driver.maximize_window()

    def test_count_elements(self):
        driver = self.driver

        links = driver.find_elements(By.TAG_NAME, "a")
        print(f"TOTAL NO OF LINKS = {len(links)}")

        buttons = driver.find_elements(By.TAG_NAME, "button")
        print(f"TOTAL NO OF BUTTONS = {len(buttons)}")

        input_fields = driver.find_elements(By.TAG_NAME, "input")
        print(f"TOTAL NO OF INPUT FIELDS = {len(input_fields)}")

    def tearDown(self):
        self.driver.quit()


if __name__ == "__main__":
    unittest.main()




---------- Forwarded message ----------
From: OM GAJAKOSH <om.is21@sahyadri.edu.in>
To: redranger2805@gmail.com
Cc: 
Bcc: 
Date: Fri, 13 Dec 2024 14:09:59 +0530
Subject: 10th st
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.common.exceptions import WebDriverException
import time
class WebPageFetcher:
    def setUp(self):
        try:
            self.driver = webdriver.Chrome()
        except WebDriverException as e:
            print(f"Error initializing WebDriver: {str(e)}")
            raise
    def fetch_page(self):
        try:
            self.driver.get("https://www.btreesystems.com/selenium-with-python-training-in-chennai/")
            time.sleep(2) 
            page_source = self.driver.page_source.encode('utf-8')
            with open('result.html', 'wb') as f:
                f.write(page_source)
            print("Page source successfully saved as 'result.html'.")   
        except Exception as e:
            print(f"An error occurred while fetching the page: {str(e)}")
    def tearDown(self):
        if hasattr(self, 'driver'):
            self.driver.quit()
            print("Browser closed successfully.")
if __name__ == "__main__":
    fetcher = WebPageFetcher()
    fetcher.setUp()
    fetcher.fetch_page()
    fetcher.tearDown()




---------- Forwarded message ----------
From: OM GAJAKOSH <om.is21@sahyadri.edu.in>
To: redranger2805@gmail.com
Cc: 
Bcc: 
Date: Fri, 13 Dec 2024 13:56:06 +0530
Subject: 8th selenium
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
import time


class Login:
    def setUp(self):
        self.driver = webdriver.Chrome()
        self.driver.maximize_window()
        self.driver.get("https://sahyadri.digital/")

    def test_login(self):
        driver = self.driver

        driver.find_element(By.ID, "student-tab").click()
        time.sleep(2)  
        driver.find_element(By.NAME, "admission_no").send_keys("admission no")
        time.sleep(1)
        driver.find_element(By.CLASS_NAME, "student_pass").send_keys("password")
        time.sleep(1) 
        driver.find_element(By.ID, "login-student").click()
        time.sleep(5)  
    def tearDown(self):
        self.driver.quit()


if __name__ == "__main__":
    test = Login()
    test.setUp()
    try:
        test.test_login()
    finally:
        test.tearDown()




---------- Forwarded message ----------
From: OM GAJAKOSH <om.is21@sahyadri.edu.in>
To: redranger2805@gmail.com
Cc: 
Bcc: 
Date: Fri, 13 Dec 2024 13:50:16 +0530
Subject: next date
#include <stdio.h>

// Function to check if the day is valid for months with 30 days
int check(int day, int month) {
    if ((month == 4 || month == 6 || month == 9 || month == 11) && day == 31)
        return 1;
    else
        return 0;
}

// Function to check if the year is a leap year
int isleap(int year) {
    if (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0))
        return 1;
    else
        return 0;
}

int main() {
    int day, month, year, tday, tmonth, tyear;
    char flag = 'y';

    do {
        flag = 'y'; // Reset flag for each input
        printf("Enter today's date in dd mm yyyy format: ");
        scanf("%d %d %d", &day, &month, &year);

        tmonth = month;
        tyear = year;

        // Check if the day is valid
        if (day < 1 || day > 31) {
            printf("Value of day not in range 1--31\n");
            flag = 'n';
        }

        // Check if the month is valid
        if (month < 1 || month > 12) {
            printf("Value of month not in range 1--12\n");
            flag = 'n';
        } else if (check(day, month)) {
            printf("Value of day not valid for the month (<=30 required)\n");
            flag = 'n';
        }

        // Check if the year is valid
        if (year < 1812 || year > 2018) {
            printf("Value of year not in range 1812--2018\n");
            flag = 'n';
        }

        // Check February constraints
        if (month == 2) {
            if (isleap(year) && day > 29) {
                printf("Invalid input for leap year\n");
                flag = 'n';
            }
            if (!isleap(year) && day > 28) {
                printf("Invalid input date for a non-leap year\n");
                flag = 'n';
            }
        }
    } while (flag == 'n'); // Repeat input if there is an error

    // Determine the next day
    switch (month) {
        case 1: case 3: case 5: case 7: case 8: case 10:
            if (day < 31)
                tday = day + 1;
            else {
                tday = 1;
                tmonth = month + 1;
            }
            break;

        case 4: case 6: case 9: case 11:
            if (day < 30)
                tday = day + 1;
            else {
                tday = 1;
                tmonth = month + 1;
            }
            break;

        case 12:
            if (day < 31)
                tday = day + 1;
            else {
                tday = 1;
                tmonth = 1;
                if (year == 2018) {
                    printf("Next year is out of the allowed range (1812--2018)\n");
                    return 0;
                } else {
                    tyear = year + 1;
                }
            }
            break;

        case 2:
            if (day < 28)
                tday = day + 1;
            else if (isleap(year) && day == 28)
                tday = day + 1;
            else if (day == 28 || day == 29) {
                tday = 1;
                tmonth = 3;
            }
            break;

        default:
            printf("Invalid month encountered\n");
            return 0;
    }

    // Print the next day's date
    printf("Next day is: %d/%d/%d\n", tday, tmonth, tyear);

    return 0;
}



---------- Forwarded message ----------
From: OM GAJAKOSH <om.is21@sahyadri.edu.in>
To: redranger2805@gmail.com
Cc: 
Bcc: 
Date: Fri, 13 Dec 2024 13:47:49 +0530
Subject: commision problem
#include <stdio.h>

int main() {
    int locks, stocks, barrels, tlocks = 0, tstocks = 0, tbarrels = 0;
    float lprice = 45.0, sprice = 30.0, bprice = 25.0, sales = 0, comm;
    int c1, c2, c3, temp;

    printf("Enter the number of locks (or -1 to exit):\n");
    scanf("%d", &locks);

    while (locks != -1) {
        c1 = (locks <= 0 || locks > 70);

        printf("Enter the number of stocks and barrels:\n");
        scanf("%d %d", &stocks, &barrels);

        c2 = (stocks <= 0 || stocks > 80);
        c3 = (barrels <= 0 || barrels > 90);

        if (c1) {
            printf("Value of locks not in range 1--70\n");
        } else {
            temp = locks + tlocks;
            if (temp > 70) {
                printf("New value of locks = %d not in range 1--70\n", temp);
            } else {
                tlocks = temp;
                printf("Total locks = %d\n", tlocks);
            }
        }

        if (c2) {
            printf("Value of stocks not in range 1--80\n");
        } else {
            temp = stocks + tstocks;
            if (temp > 80) {
                printf("New value of stocks = %d not in range 1--80\n", temp);
            } else {
                tstocks = temp;
                printf("Total stocks = %d\n", tstocks);
            }
        }

        if (c3) {
            printf("Value of barrels not in range 1--90\n");
        } else {
            temp = barrels + tbarrels;
            if (temp > 90) {
                printf("New value of barrels = %d not in range 1--90\n", temp);
            } else {
                tbarrels = temp;
                printf("Total barrels = %d\n", tbarrels);
            }
        }

        printf("Enter the number of locks (or -1 to exit):\n");
        scanf("%d", &locks);
    }

    if (tlocks > 0 && tstocks > 0 && tbarrels > 0) {
        printf("Total locks = %d\nTotal stocks = %d\nTotal barrels = %d\n", tlocks, tstocks, tbarrels);

        sales = (tlocks * lprice) + (tstocks * sprice) + (tbarrels * bprice);
        printf("Total sales is %.2f\n", sales);

        if (sales > 0) {
            if (sales > 1800) {
                comm = 0.10 * 1000.0;
                comm += 0.15 * 800.0;
                comm += 0.20 * (sales - 1800);
            } else if (sales > 1000) {
                comm = 0.10 * 1000.0;
                comm += 0.15 * (sales - 1000);
            } else {
                comm = 0.10 * sales;
            }
            printf("Commission is %.2f\n", comm);
        }
    } else {
        printf("There are no sales\n");
    }

    return 0;
}



---------- Forwarded message ----------
From: OM GAJAKOSH <om.is21@sahyadri.edu.in>
To: redranger2805@gmail.com
Cc: 
Bcc: 
Date: Fri, 13 Dec 2024 13:44:11 +0530
Subject: triangle
#include<stdio.h>
#include<stdlib.h>
int main()
{
int a,b,c;
printf("Enter the three sides of traingle:");
scanf("%d%d%d",&a,&b,&c);
if((a<1||a>10)||(b<1||b>10)||(c<1||c>10))
{
printf("Out of range values");
exit(0);
}
if((a<b+c)&&(b<a+c)&&(c<a+b))
{
if((a==b)&&(b==c))
printf("Equilateral traingle");
else if((a!=b)&&(b!=c)&&(a!=c))
printf("Scalene traingle");
else
printf("Isosceles traingle");
}
else
printf("Traingle cannot be formed");
return 0;
}
